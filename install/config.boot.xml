<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description>The purpose of this job is to start a boot server instance on a particular machine.&#xd;
This job is meant to be started via a rest call with certain commandline arguments&#xd;
</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>tourneyUrl</name>
          <description></description>
          <defaultValue>http://127.0.0.1:8080/TournamentScheduler</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>pomId</name>
          <description></description>
          <defaultValue></defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>gameName</name>
          <description></description>
          <defaultValue></defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>gameId</name>
          <description></description>
          <defaultValue></defaultValue>
        </hudson.model.StringParameterDefinition>
        <org.jvnet.jenkins.plugins.nodelabelparameter.NodeParameterDefinition plugin="nodelabelparameter@1.7.1">
          <name>machine</name>
          <description></description>
          <allowedSlaves>
            <string>ALL (no restriction)</string>
          </allowedSlaves>
          <defaultSlaves>
            <string>master</string>
          </defaultSlaves>
          <triggerIfResult>allowMultiSelectionForConcurrentBuilds</triggerIfResult>
          <allowMultiNodeSelection>true</allowMultiNodeSelection>
          <triggerConcurrentBuilds>true</triggerConcurrentBuilds>
          <ignoreOfflineNodes>false</ignoreOfflineNodes>
          <nodeEligibility class="org.jvnet.jenkins.plugins.nodelabelparameter.node.AllNodeEligibility"/>
        </org.jvnet.jenkins.plugins.nodelabelparameter.NodeParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@1.8.4">
      <maxConcurrentPerNode>1</maxConcurrentPerNode>
      <maxConcurrentTotal>0</maxConcurrentTotal>
      <categories>
        <string>game-server</string>
      </categories>
      <throttleEnabled>true</throttleEnabled>
      <throttleOption>category</throttleOption>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <assignedNode>machine</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>true</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>#!/bin/bash

###############################################################################
# You might want or need to change these
###############################################################################
LOGFILE=&quot;./log/$(date -u +%y%m%d_%H%M).log&quot;

interfacePath=&quot;faces/serverInterface.jsp&quot;
pomPath=&quot;faces/download&quot;
LOGFILE=&quot;./log/boot.$(date -u +%y%m%d_%H%M).log&quot;


###############################################################################
# No need to change anything below this line
###############################################################################

function log () {
    if [ &quot;$1&quot; == &apos;nl&apos; ]; then
        echo -e &quot;\n$2&quot; | tee -a $LOGFILE
    else
        echo -e &quot;$1&quot; | tee -a $LOGFILE
    fi
}

function cleanup () {
    # TODO Enable below
    log nl &quot;Cleaning up&quot;
    rm -fr ./boot-log/
    rm -fr ./*.tar.gz
    rm -f ./*.xml

    #log nl &quot;Not cleaning up, need to enable this&quot;
}

function get_pom () {
    log nl &quot;Get the pom file from $pomUrl&quot;
    wget -O pom.xml $pomUrl
    SIZE=$(stat -c%s &quot;pom.xml&quot;)
    if [ $SIZE -le 10 ] ; then
        log nl &quot;Error getting pom : $pomUrl&quot;
        log nl &quot;Notify TS we&apos;re boot_failed&quot;
        wget --spider -q &quot;$interfaceUrl?action=status&amp;status=boot_failed&amp;gameId=$gameId&quot;
        cleanup
        exit 1
    else
        log &quot;Pom retrieved&quot;
    fi
}


###############################################################################
# Here we go!
###############################################################################

# Some intermediate variables
interfaceUrl=&quot;$tourneyUrl$interfacePath&quot;
pomUrl=&quot;$tourneyUrl$pomPath?pomId=$pomId&quot;
bootName=&quot;game-$gameId-boot&quot;

# Make sure logdir exists
DIRECTORY=&quot;log&quot;
if [ ! -d &quot;$DIRECTORY&quot; ]; then
  mkdir $DIRECTORY
fi

log &quot;&quot;
StartTime=$(date +%s)
log &quot;StartTime     : $(date -u +%F\ %H:%M:%S)&quot;
log &quot;Nodename      : $NODE_NAME&quot;
log &quot;BuildNumber   : $BUILD_NUMBER&quot;
log &quot;Account       : ${USER}&quot;
log &quot;GameName      : $gameName&quot;
log &quot;PomId         : $pomId&quot;
log &quot;TourneyUrl    : $tourneyUrl&quot;
log &quot;interfacePath : $interfacePath&quot;
log &quot;interfaceUrl  : $interfaceUrl&quot;
log &quot;pomPath       : $pomPath&quot;
log &quot;pomUrl        : $pomUrl&quot;
log &quot;bootName      : $bootName&quot;

get_pom

CMD=&quot;mvn -Pcli -Dexec.args=\&quot;--boot $gameName.xml --game-id $gameName --control $tourneyUrl \&quot;&quot;

log nl &quot;Run maven : $CMD \n&quot;
eval $CMD

log nl &quot;Bootstrap complete!&quot;

if [ -e &quot;$gameName.xml&quot; ] ; then
    FILESIZE=$(stat -c%s &quot;$gameName.xml&quot;)
else
    FILESIZE=0
fi

if [ &quot;$FILESIZE&quot; -eq 0 ] ; then
    cleanup

    log nl &quot;Notify TS we&apos;re boot_failed&quot;
    wget --spider -q &quot;$interfaceUrl?action=status&amp;status=boot_failed&amp;gameId=$gameId&quot;

    exit 1
else
    EndTime=$(date +%s)
    ((RunningTime=EndTime-StartTime))
    log nl &quot;Bootstrap took (M:S) $(($RunningTime / 60)):$(($RunningTime % 60))&quot;

    log nl &quot;Compressing log files&quot;
    NAME=&quot;$gameName.boot.tar.gz&quot;
    mkdir -p boot-log
    mv log/powertac-boot-$gameName.trace boot-log/$gameName.trace
    mv log/powertac-boot-$gameName.state boot-log/$gameName.state
    mv log/init.* boot-log/.
    tar -czvf $NAME boot-log/$gameName.* boot-log/init.*    

    log nl &quot;Sending log file&quot;
    curl --upload-file $NAME &quot;$interfaceUrl?fileName=$NAME&amp;gameName=$gameName&quot;

    log nl &quot;Sending boot file&quot;
    curl --upload-file &quot;$gameName.xml&quot; &quot;$interfaceUrl?fileName=$gameName.xml&amp;&amp;gameName=$gameName&quot;

    cleanup

    log nl &quot;Notify TS we&apos;re boot_complete&quot;
    wget --spider -q &quot;$interfaceUrl?action=status&amp;status=boot_complete&amp;gameId=$gameId&quot;
fi

exit 0
      </command>
    </hudson.tasks.Shell>
  </builders>
  <publishers/>
  <buildWrappers/>
</project>